// Funkcja rekurencyjnie sortująca klucze obiektu
function sortObject(elem) {
    if (typeof elem !== 'object' || elem === null) {
        return elem;
    }
    if (Array.isArray(elem)) {
        return elem.map(item => sortObject(item));
    }
    const sorted = {};
    Object.keys(elem).sort().forEach(key => {
        sorted[key] = sortObject(elem[key]);
    });
    return sorted;
}

function sortJson(jsonData) {
    if (!Array.isArray(jsonData)) return jsonData;

    // Przetwarzamy każdą grupę, czyszcząc zbędne pola
    jsonData = jsonData.map(item => cleanupGroupFields(item));

    jsonData.forEach(item => {
        // Sortowanie tablicy items
        if (item.items && Array.isArray(item.items)) {
            // Czyszczenie i sortowanie kluczy każdego elementu
            item.items = item.items.map(el => sortObject(cleanupItemFields(el)));
            item.items.sort((a, b) => a.name.localeCompare(b.name));
        }
        // Sortowanie tablicy dependencies
        if (item.dependencies && Array.isArray(item.dependencies)) {
            item.dependencies = item.dependencies.map(cleanupDependencyFields);
            item.dependencies.sort((a, b) => {
                const keyA = (a.dependencyType || '') + '!@#$' + (a.name || '') + '!@#$' + (a.workflowItem || '');
                const keyB = (b.dependencyType || '') + '!@#$' + (b.name || '') + '!@#$' + (b.workflowItem || '');
                return keyA.localeCompare(keyB);
            });
        }
        // Sortowanie tablicy tags
        if (item.tags && Array.isArray(item.tags)) {
            item.tags.sort();
        }
    });

    // Sortowanie głównej tablicy wg domainClass i id
    jsonData.sort((a, b) => {
        let cmp = a.domainClass.localeCompare(b.domainClass);
        if (cmp === 0) {
            cmp = a.id.localeCompare(b.id);
        }
        return cmp;
    });

    return jsonData;
}
